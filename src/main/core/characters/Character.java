package main.core.characters;
import java.util.Date;

import core.JSONObject;
import main.core.DateManager;
import main.core.Repr;
import main.core.demographics.Demographics;
import main.core.demographics.DemographicsManager;
import main.core.map.City;
import main.core.map.MapManager;


public class Character implements Repr<Character> { 

    protected final static int MIN_AGE = 0;
    protected final static int MAX_AGE = 120;

    private Demographics demographics;
    private Name name;
    private City birthplaceCity; // city the character was born in
    private City currentLocationCity; // City the character is currently in / near
    private City residenceCity; // City the character currently lives in
    private Date birthday; // day of the year on which the character was born, also used to find age

    private CharacterModel appearance;

    /**
     * Creates a Character with all fields generated by the CharacterManager.
     * @see #Character(Demographics, Name, City, City, City, Date, CharacterModel)
     */
    public Character() {
        // Have builder constructor generate all fields
        this(null, null, null, null, null, null, null);
    }

    /**
     * Creates a Character parsed from the Repr buildstring.
     * @param buildstring A valid Repr-format buildstring.
     */
    public Character(String buildstring) {
        if (buildstring == null || buildstring.isBlank()) {
            throw new IllegalArgumentException("The given buildstring was null, and a character could not be created.");
        }
        fromRepr(buildstring);
        CharacterManager.addCharacter(this);
    }

    /**
     * Creates a character from the JSON Object structure.
     * @param json A JSON Object representing a character.
     */
    public Character(JSONObject json) {
        if (json == null) {
            throw new IllegalArgumentException("The passed JSON Object was null, and a character could not be created.");
        }
        fromJson(json);
    }

    /**
     * Creates a Character with the given values. The CharacterManager will generate values for any null fields passed.
     * @param demographics A demographics object for the character's demographics
     * @param name A name object for the character's name
     * @param birthplaceCity The city where the character was born
     * @param currentLocationCity The city where the character currently is
     * @param residenceCity The city where the character resides
     * @param birthday The date of birth of the character
     * @param appearance The model to be used for the character
     */
    public Character(Demographics demographics, Name name, City birthplaceCity, City currentLocationCity, City residenceCity, Date birthday, CharacterModel appearance) {
        this.demographics        = demographics        != null ? demographics        : DemographicsManager.generateDemographics();
        this.name                = name                != null ? name                : CharacterManager.generateName(demographics);
        this.birthplaceCity      = birthplaceCity      != null ? birthplaceCity      : MapManager.selectCity(demographics);
        this.currentLocationCity = currentLocationCity != null ? currentLocationCity : MapManager.selectCity(demographics);
        this.residenceCity       = residenceCity       != null ? residenceCity       : MapManager.selectCity(demographics);
        this.birthday            = birthday            != null ? birthday            : CharacterManager.generateBirthday(demographics);
        this.appearance          = appearance          != null ? appearance          : CharacterManager.generateCharacterModel(demographics, birthday);

        CharacterManager.addCharacter(this);
    }

    public City getBirthplaceCity() {
        return this.birthplaceCity;
    }
    public void setBirthplaceCity(City birthplace) {
        this.birthplaceCity = birthplace;
    }

    public City getCurrentLocationCity() {
        return this.currentLocationCity;
    }
    public void setCurrentLocationCity(City currentLocation) {
        this.currentLocationCity = currentLocation;
    }

    public City getResidenceCity() {
        return this.residenceCity;
    }
    public void setResidenceCity(City residence) {
        this.residenceCity = residence;
    }

    public Name getName() {
        return this.name;
    }
    public void setName(Name name) {
        this.name = name;
    }

    public Demographics getDemographics() {
        return this.demographics;
    }
    public void setDemographics(Demographics demographics) {
        this.demographics = demographics;
    }

    public Date getBirthday() {
        return this.birthday;
    }
    public int getAge() {
        return DateManager.yearsAgo(this.birthday);
    }
    public void setBirthday(Date birthday) {
        this.birthday = birthday;
    }
    public void setBirthday(long milliseconds) {
        this.birthday = new Date(milliseconds);
    }

    public CharacterModel getAppearance() {
        return appearance;
    }
    public void setAppearance(CharacterModel appearance) {
        this.appearance = appearance;
    }

    @Override
    public Character fromRepr(String repr) {
        return this;
    }

    public Character fromJson(JSONObject json) {
        if (json == null)
            return null;
        Object demographicsObj = json.get("demographics");
        if (demographicsObj == null)
            this.demographics = DemographicsManager.generateDemographics();
        else if (demographicsObj instanceof JSONObject demographicsJson)
            this.demographics = Demographics.fromJson(demographicsJson);
        Object nameObj = json.get("name");
        if (nameObj == null)
            this.name = CharacterManager.generateName(demographics);
        else if (nameObj instanceof JSONObject nameJson)
            this.name = Name.fromJson(nameJson);
        Object birthplaceObj = json.get("birthplace");
        if (birthplaceObj == null)
            this.birthplaceCity = MapManager.selectCity(demographics);
        else if (birthplaceObj instanceof JSONObject birthplaceJson)
            this.birthplaceCity = MapManager.matchCity(birthplaceJson.getAsString());
        Object currentLocationObj = json.get("current_location");
        if (currentLocationObj == null)
            this.currentLocationCity = MapManager.selectCity(demographics);
        else if (currentLocationObj instanceof JSONObject currentLocationJson)
            this.currentLocationCity = MapManager.matchCity(currentLocationJson.getAsString());
        Object residenceObj = json.get("residence");
        if (residenceObj == null)
            this.currentLocationCity = MapManager.selectCity(demographics);
        else if (residenceObj instanceof JSONObject residenceJson)
            this.currentLocationCity = MapManager.matchCity(residenceJson.getAsString());
        Object birthdayObj = json.get("birthday");
        if (birthdayObj == null)
            this.birthday = CharacterManager.generateBirthday(demographics);
        else if (birthdayObj instanceof JSONObject birthdayJson)
            this.birthday = DateManager.dateFromString(birthdayJson.getAsString());
        Object appearanceObj = json.get("appearance");
        if (appearanceObj == null)
            this.appearance = CharacterManager.generateAppearance(this);
        else if (appearanceObj instanceof JSONObject appearanceJson)
            this.appearance = CharacterModel.fromJson(appearanceJson);

        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null || this.getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        return this.toString().equals(other.toString());
    }

    @Override
    public String toString() {
        return this.toRepr();
    }
    
    @Override
    public String toRepr() {
        String repr = String.format(
            "%s:[name:%sbirthplaceCity=%s;currentLocationCity=%s;residenceCity=%s;birthday=%d;appearance=%s];",
            this.getClass().getName().split("\\.")[this.getClass().getName().split("\\.").length - 1],
            this.name.toRepr(),
            this.birthplaceCity.getNameWithState(),
            this.currentLocationCity.getNameWithState(),
            this.residenceCity.getNameWithState(),
            this.birthday.getTime(),
            this.appearance.toRepr()
        );
        return repr;
    }
}
