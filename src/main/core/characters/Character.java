/*
 * Character.java
 * Steven LaGoy
 * Created: 28 August 2024 at 1:07 PM
 * Modified: 31 May 2025
 */

package main.core.characters;

// IMPORTS ----------------------------------------------------------------------------------------

// Standard Library Imports
import java.util.Date;

// Internal Imports
import core.JSONObject;
import main.core.DateManager;
import main.core.Jsonic;
import main.core.Repr;
import main.core.characters.names.Name;
import main.core.characters.names.NameManager;
import main.core.demographics.Demographics;
import main.core.demographics.DemographicsManager;
import main.core.map.City;
import main.core.map.MapManager;

/**
 * The most basic form of Character, from which other types of Characters inherit.
 * <p>
 * Contains fields and methods which all Characters possess, including Demographics, Name, and Birthday.
 */
public class Character implements Repr<Character>, Jsonic<Character> {

    // STATIC VARIABLES ---------------------------------------------------------------------------

    /** Minimum age of a Character */
    public final static int MIN_AGE = 0;
    /** Maximum age of a Character */
    public final static int MAX_AGE = 120;

    // INSTANCE VARIABLES -------------------------------------------------------------------------

    /** Demographics object representing this Character's demographic memberships. */
    private Demographics demographics;
    /** Name object representing this Character's name. */
    private Name name;
    /** City in which this Character was born. */
    private City birthplaceCity;
    /** City to which this Character is currently nearest. */
    private City currentLocationCity;
    /** City in which this Character currently resides (primary residence). */
    private City residenceCity;
    /** Date on which this character was born. @see #getAge() */
    private Date birthday;
    /** CharacterModel object to be rendered for this Character. */
    private CharacterModel appearance;

    // CONSTRUCTORS -------------------------------------------------------------------------------

    /**
     * Creates a Character with all fields generated by the CharacterManager.
     * @see #Character(Demographics, Name, City, City, City, Date, CharacterModel)
     */
    public Character() {
        // Have builder constructor generate all fields
        this(null, null, null, null, null, null, null);
    }
    
    /**
     * Deep-copies the existing fields of another Character object.
     * @param other Character to copy fields from.
     */
    public Character(Character other) {
        this(other, true);
    }

    /**
     * Deep-copies the existing fields of another Character object.
     * Optionally adds to CharacterManager's list of Characters.
     * @param other Character to copy fields from.
     * @param addToCharacterList Boolean indicating whether to add the created object to the list.
     */
    public Character(Character other, boolean addToCharacterList) {
        this.demographics        = new Demographics(other.demographics);
        this.name                = new Name(other.name);
        this.birthplaceCity      = other.birthplaceCity;
        this.currentLocationCity = other.currentLocationCity;
        this.residenceCity       = other.residenceCity;
        this.birthday            = (Date) other.birthday.clone();
        this.appearance          = new CharacterModel(other.appearance);

        if (addToCharacterList) CharacterManager.addCharacter(this);
    }

    /**
     * Creates a Character parsed from the Repr buildstring.
     * @param buildstring Valid Repr-format buildstring.
     */
    public Character(String buildstring) {
        if (buildstring == null || buildstring.isBlank()) {
            throw new IllegalArgumentException("The given buildstring was null, and a " + getClass().getSimpleName() + " object could not be created.");
        }
        fromRepr(buildstring);
        CharacterManager.addCharacter(this);
    }

    /**
     * Creates a character from the JSON Object structure.
     * @param json JSONObject representing a character.
     */
    public Character(JSONObject json) {
        if (json == null) {
            throw new IllegalArgumentException("The passed JSONObject was null, and a " + getClass().getSimpleName() + " object could not be created.");
        }
        fromJson(json);
        CharacterManager.addCharacter(this);
    }

    /**
     * Creates a Character with the passed values. The CharacterManager will generate
     * values for any {@code null} values passed.
     * @param demographics Demographics object representing this Character's demographic memberships.
     * @param name Name object representing this Character's name.
     * @param birthplaceCity City in which this Character was born.
     * @param currentLocationCity City to which this Character is currently nearest.
     * @param residenceCity City in which this Character currently resides (primary residence).
     * @param birthday Date on which this character was born.
     * @param appearance CharacterModel object to be rendered for this Character.
     */
    public Character(Demographics demographics, Name name, City birthplaceCity, City currentLocationCity, City residenceCity, Date birthday, CharacterModel appearance) {
        this.demographics        = demographics        != null ? demographics        : DemographicsManager.generateWeightedDemographics();
        this.name                = name                != null ? name                : NameManager.generateName(this.demographics);
        this.birthplaceCity      = birthplaceCity      != null ? birthplaceCity      : MapManager.selectCity(this.demographics);
        this.currentLocationCity = currentLocationCity != null ? currentLocationCity : MapManager.selectCity(this.demographics);
        this.residenceCity       = residenceCity       != null ? residenceCity       : MapManager.selectCity(this.demographics);
        this.birthday            = birthday            != null ? birthday            : CharacterManager.generateBirthday(this.demographics);
        this.appearance          = appearance          != null ? appearance          : CharacterManager.generateCharacterModel(this.demographics, this.birthday);
        
        CharacterManager.addCharacter(this);
    }
    
    // GETTERS AND SETTERS ------------------------------------------------------------------------
    
    // Demographics
    public Demographics getDemographics() {
        return this.demographics;
    }
    public void setDemographics(Demographics demographics) {
        this.demographics = demographics;
    }

    // Name
    public Name getName() {
        return this.name;
    }
    public void setName(Name name) {
        this.name = name;
    }

    // Birthplace City
    public City getBirthplaceCity() {
        return this.birthplaceCity;
    }
    public void setBirthplaceCity(City birthplace) {
        this.birthplaceCity = birthplace;
    }

    // Current Location City
    public City getCurrentLocationCity() {
        return this.currentLocationCity;
    }
    public void setCurrentLocationCity(City currentLocation) {
        this.currentLocationCity = currentLocation;
    }

    // Residence City
    public City getResidenceCity() {
        return this.residenceCity;
    }
    public void setResidenceCity(City residence) {
        this.residenceCity = residence;
    }

    // Birthday Date, Age
    public Date getBirthday() {
        return this.birthday;
    }
    public void setBirthday(Date birthday) {
        this.birthday = birthday;
    }
    public void setBirthday(long milliseconds) {
        this.birthday = new Date(milliseconds);
    }
    public int getAge() {
        return DateManager.yearsAgo(this.birthday);
    }

    // Appearance CharacterModel
    public CharacterModel getAppearance() {
        return appearance;
    }
    public void setAppearance(CharacterModel appearance) {
        this.appearance = appearance;
    }

    // REPRESENTATION METHODS ---------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Character fromRepr(String repr) {
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String toRepr() {
        String repr = String.format(
            "%s:[name:%sbirthplaceCity=%s;currentLocationCity=%s;residenceCity=%s;birthday=%d;appearance=%s];",
            this.getClass().getName().split("\\.")[this.getClass().getName().split("\\.").length - 1],
            this.name.toRepr(),
            this.birthplaceCity.getNameWithState(),
            this.currentLocationCity.getNameWithState(),
            this.residenceCity.getNameWithState(),
            this.birthday.getTime(),
            this.appearance.toRepr()
            );
        return repr;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Character fromJson(JSONObject json) {
        if (json == null)
            return null;
        Object demographicsObj = json.get("demographics");
        if (demographicsObj == null)
            this.demographics = DemographicsManager.generateWeightedDemographics();
        else if (demographicsObj instanceof JSONObject demographicsJson)
            this.demographics = new Demographics(demographicsJson);
        Object nameObj = json.get("name");
        if (nameObj == null)
            this.name = NameManager.generateName(demographics);
        else if (nameObj instanceof JSONObject nameJson)
            this.name = new Name(nameJson);
        Object birthplaceObj = json.get("birthplace");
        if (birthplaceObj == null)
            this.birthplaceCity = MapManager.selectCity(demographics);
        else if (birthplaceObj instanceof JSONObject birthplaceJson)
            this.birthplaceCity = MapManager.matchCity(birthplaceJson.getAsString());
        Object currentLocationObj = json.get("current_location");
        if (currentLocationObj == null)
            this.currentLocationCity = MapManager.selectCity(demographics);
        else if (currentLocationObj instanceof JSONObject currentLocationJson)
            this.currentLocationCity = MapManager.matchCity(currentLocationJson.getAsString());
        Object residenceObj = json.get("residence");
        if (residenceObj == null)
            this.currentLocationCity = MapManager.selectCity(demographics);
        else if (residenceObj instanceof JSONObject residenceJson)
            this.currentLocationCity = MapManager.matchCity(residenceJson.getAsString());
        Object birthdayObj = json.get("birthday");
        if (birthdayObj == null)
            this.birthday = CharacterManager.generateBirthday(demographics);
        else if (birthdayObj instanceof JSONObject birthdayJson)
            this.birthday = DateManager.dateFromString(birthdayJson.getAsString());
        Object appearanceObj = json.get("appearance");
        if (appearanceObj == null)
            this.appearance = CharacterManager.generateAppearance(this);
        else if (appearanceObj instanceof JSONObject appearanceJson)
            this.appearance = CharacterModel.fromJson(appearanceJson);

        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JSONObject toJson() {
        JSONObject result = new JSONObject();
        return result;
    }

    
    /**
     * @see #toRepr()
     */
    @Override
    public String toString() {
        return this.toRepr();
    }
    
    // OBJECT METHODS -----------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null || this.getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        return this.toString().equals(other.toString());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int hash = 7;
        hash = prime * hash + (demographics == null ? 0 : demographics.hashCode());
        hash = prime * hash + (name == null ? 0 : name.hashCode());
        return hash;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Character clone() {
        return new Character(this);
    }
}
